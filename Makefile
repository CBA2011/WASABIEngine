#############################################################################
# Makefile for building: libWASABIEngine.so.1.0.0
# Generated by qmake (2.01a) (Qt 4.7.2) on: Fr. Sep 30 11:28:39 2011
# Project:  WASABIEngine.pro
# Template: lib
# Command: /usr/bin/qmake-qt4 -spec /usr/share/qt4/mkspecs/linux-g++ CONFIG+=debug QMLJSDEBUGGER_PATH=/usr/share/qtcreator/qml/qmljsdebugger -o Makefile WASABIEngine.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DWASABIENGINE_LIBRARY -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -g -Wall -W -D_REENTRANT -fPIC $(DEFINES)
CXXFLAGS      = -pipe -g -Wall -W -D_REENTRANT -fPIC $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4 -I.
LINK          = g++
LFLAGS        = -shared -Wl,-soname,libWASABIEngine.so.1
LIBS          = $(SUBLIBS)  -L/usr/lib -lQtGui -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake-qt4
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = SecondaryEmotion.cc \
		PrimaryEmotion.cc \
		EmotionDynamics.cc \
		EmotionConverter.cc \
		EmotionContainer.cc \
		cogaEmotionalAttendee.cc \
		cogaAttendee.cc \
		AffectiveState.cc \
		WASABIRunner.cc \
		WASABIEngine.cc 
OBJECTS       = SecondaryEmotion.o \
		PrimaryEmotion.o \
		EmotionDynamics.o \
		EmotionConverter.o \
		EmotionContainer.o \
		cogaEmotionalAttendee.o \
		cogaAttendee.o \
		AffectiveState.o \
		WASABIRunner.o \
		WASABIEngine.o
DIST          = /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/debug.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		WASABIEngine.pro
QMAKE_TARGET  = WASABIEngine
DESTDIR       = 
TARGET        = libWASABIEngine.so.1.0.0
TARGETA       = libWASABIEngine.a
TARGETD       = libWASABIEngine.so.1.0.0
TARGET0       = libWASABIEngine.so
TARGET1       = libWASABIEngine.so.1
TARGET2       = libWASABIEngine.so.1.0

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile  $(TARGET)

$(TARGET):  $(OBJECTS) $(SUBLIBS) $(OBJCOMP)  
	-$(DEL_FILE) $(TARGET) $(TARGET0) $(TARGET1) $(TARGET2)
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(LIBS) $(OBJCOMP)
	-ln -s $(TARGET) $(TARGET0)
	-ln -s $(TARGET) $(TARGET1)
	-ln -s $(TARGET) $(TARGET2)



staticlib: $(TARGETA)

$(TARGETA):  $(OBJECTS) $(OBJCOMP) 
	-$(DEL_FILE) $(TARGETA) 
	$(AR) $(TARGETA) $(OBJECTS)

Makefile: WASABIEngine.pro  /usr/share/qt4/mkspecs/linux-g++/qmake.conf /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/debug.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib/libQtGui.prl \
		/usr/lib/libQtCore.prl
	$(QMAKE) -spec /usr/share/qt4/mkspecs/linux-g++ CONFIG+=debug QMLJSDEBUGGER_PATH=/usr/share/qtcreator/qml/qmljsdebugger -o Makefile WASABIEngine.pro
/usr/share/qt4/mkspecs/common/g++.conf:
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/debug.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib/libQtGui.prl:
/usr/lib/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -spec /usr/share/qt4/mkspecs/linux-g++ CONFIG+=debug QMLJSDEBUGGER_PATH=/usr/share/qtcreator/qml/qmljsdebugger -o Makefile WASABIEngine.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/WASABIEngine1.0.0 || $(MKDIR) .tmp/WASABIEngine1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/WASABIEngine1.0.0/ && $(COPY_FILE) --parents WASABIEngine_global.h SecondaryEmotion.h PrimaryEmotion.h EmotionDynamics.h EmotionConverter.h EmotionContainer.h cogaEmotionalAttendee.h cogaAttendee.h AffectiveState.h WASABIEngine.h .tmp/WASABIEngine1.0.0/ && $(COPY_FILE) --parents SecondaryEmotion.cc PrimaryEmotion.cc EmotionDynamics.cc EmotionConverter.cc EmotionContainer.cc cogaEmotionalAttendee.cc cogaAttendee.cc AffectiveState.cc WASABIRunner.cc WASABIEngine.cc .tmp/WASABIEngine1.0.0/ && (cd `dirname .tmp/WASABIEngine1.0.0` && $(TAR) WASABIEngine1.0.0.tar WASABIEngine1.0.0 && $(COMPRESS) WASABIEngine1.0.0.tar) && $(MOVE) `dirname .tmp/WASABIEngine1.0.0`/WASABIEngine1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/WASABIEngine1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) $(TARGET0) $(TARGET1) $(TARGET2) $(TARGETA)
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all:
compiler_moc_header_clean:
compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: 

####### Compile

SecondaryEmotion.o: SecondaryEmotion.cc SecondaryEmotion.h \
		AffectiveState.h \
		WASABIEngine_global.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o SecondaryEmotion.o SecondaryEmotion.cc

PrimaryEmotion.o: PrimaryEmotion.cc PrimaryEmotion.h \
		AffectiveState.h \
		WASABIEngine_global.h \
		SecondaryEmotion.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o PrimaryEmotion.o PrimaryEmotion.cc

EmotionDynamics.o: EmotionDynamics.cc EmotionDynamics.h \
		EmotionContainer.h \
		AffectiveState.h \
		WASABIEngine_global.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o EmotionDynamics.o EmotionDynamics.cc

EmotionConverter.o: EmotionConverter.cc EmotionConverter.h \
		AffectiveState.h \
		WASABIEngine_global.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o EmotionConverter.o EmotionConverter.cc

EmotionContainer.o: EmotionContainer.cc EmotionContainer.h \
		AffectiveState.h \
		WASABIEngine_global.h \
		PrimaryEmotion.h \
		SecondaryEmotion.h \
		EmotionDynamics.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o EmotionContainer.o EmotionContainer.cc

cogaEmotionalAttendee.o: cogaEmotionalAttendee.cc cogaEmotionalAttendee.h \
		EmotionDynamics.h \
		EmotionContainer.h \
		AffectiveState.h \
		WASABIEngine_global.h \
		EmotionConverter.h \
		cogaAttendee.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o cogaEmotionalAttendee.o cogaEmotionalAttendee.cc

cogaAttendee.o: cogaAttendee.cc cogaAttendee.h \
		WASABIEngine_global.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o cogaAttendee.o cogaAttendee.cc

AffectiveState.o: AffectiveState.cc AffectiveState.h \
		WASABIEngine_global.h \
		EmotionDynamics.h \
		EmotionContainer.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o AffectiveState.o AffectiveState.cc

WASABIRunner.o: WASABIRunner.cc cogaEmotionalAttendee.h \
		EmotionDynamics.h \
		EmotionContainer.h \
		AffectiveState.h \
		WASABIEngine_global.h \
		EmotionConverter.h \
		cogaAttendee.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o WASABIRunner.o WASABIRunner.cc

WASABIEngine.o: WASABIEngine.cc WASABIEngine.h \
		cogaEmotionalAttendee.h \
		EmotionDynamics.h \
		EmotionContainer.h \
		AffectiveState.h \
		WASABIEngine_global.h \
		EmotionConverter.h \
		cogaAttendee.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o WASABIEngine.o WASABIEngine.cc

####### Install

install_target: first FORCE
	@$(CHK_DIR_EXISTS) $(INSTALL_ROOT)/usr/lib/ || $(MKDIR) $(INSTALL_ROOT)/usr/lib/ 
	-$(INSTALL_PROGRAM) "$(TARGET)" "$(INSTALL_ROOT)/usr/lib/$(TARGET)"
	-$(SYMLINK) "$(TARGET)" "$(INSTALL_ROOT)/usr/lib/$(TARGET0)"
	-$(SYMLINK) "$(TARGET)" "$(INSTALL_ROOT)/usr/lib/$(TARGET1)"
	-$(SYMLINK) "$(TARGET)" "$(INSTALL_ROOT)/usr/lib/$(TARGET2)"

uninstall_target:  FORCE
	-$(DEL_FILE) "$(INSTALL_ROOT)/usr/lib/$(TARGET)" 
	 -$(DEL_FILE) "$(INSTALL_ROOT)/usr/lib/$(TARGET0)" 
	 -$(DEL_FILE) "$(INSTALL_ROOT)/usr/lib/$(TARGET1)" 
	 -$(DEL_FILE) "$(INSTALL_ROOT)/usr/lib/$(TARGET2)"
	-$(DEL_DIR) $(INSTALL_ROOT)/usr/lib/ 


install:  install_target  FORCE

uninstall: uninstall_target   FORCE

FORCE:

